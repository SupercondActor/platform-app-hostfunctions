
export class TestManager {

    // _SupercondActor context object must be injected at runtime
    constructor(private supercondActor: SupercondActor.ISupercondActor) { }

    // Application name must be in URI format and start with 'fabric:/'
    appName: string = 'fabric:/SupercondActor.Service.Test';
    //appName: string = 'fabric:/SupercondActor.Platform.BusinessServicesApp';

    async runTestCycle() {
        try {
            let runCounter = await this.updateRunCounter();
            let appExists = await this.checkIfApplicationExists(this.appName);

            if (appExists) {
                await this.createTestServices(runCounter);
            }
            else {
                await this.createTestApplication();
            }
        }
        catch (err) {
            this.supercondActor.Logger.logError('Error executing method runTestCycle: ' + err);
        }
    }

    async updateRunCounter(): Promise<number> {
        // get run counter
        let runCounter: number = await this.supercondActor.Service.getLocalStateAsync('runCounter');
        if (!++runCounter) {
            runCounter = 0;
        }
        this.supercondActor.Logger.logInfo(`Executing ServiceManager cycle #${runCounter}.`);
        // save run counter
        await this.supercondActor.Service.saveLocalStateAsync('runCounter', runCounter);
        return runCounter;
    }

    async checkIfApplicationExists(appName: string): Promise<boolean> {
        // trying to find the application
        let appList = await this.supercondActor.Service.getApplicationsAsync();
        let appInfo = appList.find(a => a.applicationName === appName);
        return !!appInfo;
    }

    async createTestApplication() {
        // create application
        this.supercondActor.Logger.logInfo(['Creating test application...', this.appName]);
        await this.supercondActor.Service.createApplicationAsync(this.appName);
        await this.supercondActor.Service.saveLocalStateAsync('appName', this.appName);
        this.supercondActor.Logger.logInfo(['Created test application', this.appName]);

        // create API service
        this.supercondActor.Logger.logInfo('Creating Test Api Service...');
        let apiServiceConfig = this.getApiServiceConfig();
        let apiServiceUri = await this.supercondActor.Service.createOrUpdateApiServiceAsync(apiServiceConfig, this.appName);

        this.supercondActor.Logger.logInfo(['Created Test Api Service', apiServiceUri]);
    }

    getApiServiceConfig(): SupercondActor.IApiServiceConfig {
        // provide API service configuration
        let serviceConfig: SupercondActor.IApiServiceConfig = {
            serviceName: 'Test Api Service',
            groupName: 'Generated Services',
            instanceCount: -1,
            metadataJson: '{ "description": "Generated by ServiceManager scheduled service" }',
            enableADAuthentication: false,
            configureProxy: true,
            serveFiles: false,
            proxyConfiguration: [
                {
                    "Key": "traefik.frontend.rule",
                    "Value": "PathPrefixStrip: /api/testapp"
                }
            ],
            serviceScript: `let TestManager = new MyServiceTypes.TestManager(_SupercondActor_Context);
let counters = await TestManager.requestServiceCounts();
_SupercondActor_Context.Logger.logInfo(['Awailable test services', counters]);
return counters;`,
            stopRequested: false
        };
        return serviceConfig;
    }

    async requestServiceCounts() {
        let apiPr = await this.supercondActor.Service.getApiServicesAsync(this.appName);
        let longrunningPr = await this.supercondActor.Service.getLongRunningServicesAsync(this.appName);
        let scheduledPr = await this.supercondActor.Service.getScheduledServicesAsync(this.appName);

        const [api, longrunning, scheduled] = await Promise.all([apiPr, longrunningPr, scheduledPr]);

        return {
            apiCount: api.length,
            longrunningCount: longrunning.length,
            scheduledCount: scheduled.length
        };
    }

    async createTestServices(runCounter: number) {
        // create Scheduled service
        let serviceConfig = this.getScheduledServiceConfig(runCounter);
        let serviceUri = await this.supercondActor.Service.createOrUpdateScheduledServiceAsync(serviceConfig, this.appName);
        this.supercondActor.Logger.logInfo([`Created Test Scheduled Service #${runCounter}`, serviceUri]);

        // create Long-running service
        let lrServiceConfig = this.getLongRunningServiceConfig(runCounter);
        let lrServiceUri = await this.supercondActor.Service.createOrUpdateLongRunningServiceAsync(lrServiceConfig, this.appName);
        this.supercondActor.Logger.logInfo([`Created Test Long-running Service #${runCounter}`, lrServiceUri]);
    }

    getScheduledServiceConfig(runCounter: number): SupercondActor.IScheduledServiceConfig {
        let serviceConfig: SupercondActor.IScheduledServiceConfig = {
            serviceName: `Test Scheduled Service #${runCounter}`,
            groupName: 'Generated Services',
            metadataJson: '{ "description": "Generated by ServiceManager scheduled service" }',
            job: {
                jobSchedule: {
                    intervalSeconds: 15
                },
                stopRequested: false,
                jobScript: `let TestManager = new MyServiceTypes.TestManager(_SupercondActor_Context);
let results = await TestManager.runSystemTests(${runCounter});
_SupercondActor_Context.Logger.logInfo(['Scheduled Service #${runCounter} Test results', results]);
return results;`
            }
        };
        return serviceConfig;
    }

    getLongRunningServiceConfig(runCounter: number): SupercondActor.ILongRunningServiceConfig {
        let sericeScript = `let TestManager = new MyServiceTypes.TestManager(_SupercondActor_Context);
while (true) {
    let results = await TestManager.runSystemTests(${runCounter});
    _SupercondActor_Context.Logger.logInfo(['--Long-running Service #${runCounter} Test results', results]);
    await TestManager.sleep(17000);
}`;
        let serviceConfig: SupercondActor.ILongRunningServiceConfig = {
            serviceName: `Test Long-running Service #${runCounter}`,
            instanceCount: 1,
            groupName: 'Generated Services',
            metadataJson: '{ "description": "Generated by ServiceManager scheduled service" }',
            stopRequested: true,
            serviceScript: sericeScript
        };
        return serviceConfig;
    }

    async runSystemTests(runCounter: number) {
        let serviceConfig = await this.supercondActor.Service.getServiceDescriptorAsync();

        if (serviceConfig.descriptor.serviceName.endsWith(`#${runCounter}`)) {
            this.supercondActor.Logger.logInfo([`#${runCounter} >> Confirmed service name ${serviceConfig.descriptor.serviceName}`]);
        }
        else {
            throw new Error(`#${runCounter} >> Incorrect service name '${serviceConfig.descriptor.serviceName}'`);
        }
        let counters = await this.requestServiceCounts();
        this.supercondActor.Logger.logInfo([`#${runCounter} >> Service counters`, counters]);
        return counters;
    }

    sleep(ms: number) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}